name: Build quaddtype wheels for Linux

on:
  push:
    branches:
      - sep-workflows
    tags:
      - "v*"
  pull_request:

jobs:
  build_wheels:
    name: Build wheels on Linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install cibuildwheel
        run: pip install cibuildwheel==2.20.0

      - name: Build wheels
        env:
          CIBW_BUILD: cp310-manylinux_x86_64
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          CIBW_BUILD_VERBOSITY: "3"
          CIBW_BEFORE_ALL: |
            yum install -y wget
            wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
            bash miniconda.sh -b -p /root/miniconda
            export PATH="/root/miniconda/bin:$PATH"
            conda config --set always_yes yes --set changeps1 no
            conda update -q conda
            conda info -a
            conda config --add channels conda-forge
            conda config --set channel_priority strict
            conda create -n build_env python=3.10
            source activate build_env
            conda install -y sleef
          CIBW_ENVIRONMENT: >
            LD_LIBRARY_PATH="/root/miniconda/envs/build_env/lib:$LD_LIBRARY_PATH"
            LIBRARY_PATH="/root/miniconda/envs/build_env/lib:$LIBRARY_PATH"
            CFLAGS="-I/root/miniconda/envs/build_env/include $CFLAGS"
            CXXFLAGS="-I/root/miniconda/envs/build_env/include $CXXFLAGS"
            LDFLAGS="-L/root/miniconda/envs/build_env/lib $LDFLAGS"
            SLEEF_PATH="/root/miniconda/envs/build_env"
          CIBW_REPAIR_WHEEL_COMMAND: >
            auditwheel repair -w {dest_dir} --plat manylinux_2_28_x86_64 {wheel}
          CIBW_TEST_COMMAND: |
            python -c "import os; print('SLEEF_PATH:', os.environ.get('SLEEF_PATH', 'Not set'))"
            python -c "import platform; print('Python version:', platform.python_version())"
            python -c "import sys; print('sys.platform:', sys.platform)"
            python -c "import quaddtype; print('quaddtype imported successfully')"
        run: |
          python -m cibuildwheel --output-dir wheelhouse
        working-directory: ./quaddtype

      - uses: actions/upload-artifact@v3
        with:
          path: ./quaddtype/wheelhouse/*.whl
          name: wheels-linux

  publish_to_testpypi:
    name: Publish to TestPyPI
    needs: build_wheels
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@v1.8.5
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist/*

  create_release:
    name: Create Release
    needs: build_wheels
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        uses: softprops/action-gh-release@v1
        with:
          files: ./artifacts/**/*.whl
