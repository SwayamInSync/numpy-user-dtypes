name: Build Wheels

on:
  push:
    branches:
      - win-sleeef
  pull_request:
  workflow_dispatch:

jobs:
  build_wheels_windows:
    name: Build wheels on Windows
    runs-on: windows-latest
    strategy:
      matrix:
        architecture: [x64]

    steps:
      - uses: actions/checkout@v3

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.architecture }}

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: ${{ matrix.architecture }}

      - name: Install CMake
        uses: lukka/get-cmake@latest

      - name: Clone and Build SLEEF
        shell: pwsh
        run: |
          git clone https://github.com/shibatch/sleef.git
          cd sleef
          cmake -S . -B build -G "Visual Studio 17 2022" -A ${{ matrix.architecture == 'x86' && 'Win32' || 'x64' }} -DSLEEF_BUILD_QUAD:BOOL=ON -DSLEEF_BUILD_SHARED_LIBS:BOOL=ON -DCMAKE_POSITION_INDEPENDENT_CODE=ON
          cmake --build build --config Release --parallel
          cmake --install build --prefix "C:/sleef" --config Release

      - name: Setup build environment
        shell: pwsh
        run: |
          $env:INCLUDE += ";C:\sleef\include"
          $env:LIB += ";C:\sleef\lib"
          $env:PATH = "C:\sleef\bin;$env:PATH"
          echo "INCLUDE=$env:INCLUDE" >> $env:GITHUB_ENV
          echo "LIB=$env:LIB" >> $env:GITHUB_ENV
          echo "PATH=$env:PATH" >> $env:GITHUB_ENV

      - name: Install build dependencies
        shell: bash -l {0}
        run: |
          pip install -U pip
          pip install cibuildwheel==2.20.0 ninja meson meson-python numpy delvewheel pytest

      - name: Build wheels
        env:
          CIBW_BUILD: 'cp310-* cp311-* cp312-*'
          CIBW_SKIP: 'pp* cp36-* cp37-* cp38-* cp39-* cp313-*'
          CIBW_ARCHS_WINDOWS: ${{ matrix.architecture == 'x86' && 'x86' || 'AMD64' }}
          CIBW_BUILD_VERBOSITY: '3'
          DISTUTILS_USE_SDK: '1'
          MSSdk: '1'
          CIBW_BEFORE_BUILD: |
            pip install meson meson-python ninja numpy
          CIBW_REPAIR_WHEEL_COMMAND: 'delvewheel repair -w {dest_dir} {wheel} --add-path C:\sleef\bin'
          CIBW_TEST_COMMAND: |
            pip install {package}[test]
            python -m pytest -v {project}/test
          CIBW_TEST_EXTRAS: test
          CIBW_TEST_FAIL_FAST: 1
        shell: pwsh
        run: |
          python -m cibuildwheel --output-dir wheelhouse
          if (-not (Test-Path wheelhouse/*.whl)) { throw "Wheel was not created" }
        working-directory: ./quaddtype

      - uses: actions/upload-artifact@v4
        with:
          path: ./quaddtype/wheelhouse/*.whl
          name: wheels-windows-${{ matrix.architecture }}
