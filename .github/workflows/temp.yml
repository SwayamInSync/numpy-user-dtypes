name: Build Wheels

on:
  push:
    branches:
      - package-fix
    tags:
      - 'v*'
  pull_request:

jobs:
  build_wheels_windows:
  name: Build wheels on Windows
  runs-on: windows-latest
  strategy:
    matrix:
      architecture: [x64]

  steps:
    - uses: actions/checkout@v3

    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.architecture }}

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        architecture: ${{ matrix.architecture }}

    - name: Install Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: '3.10'
        architecture: ${{ matrix.architecture }}

    - name: Install SLEEF and other dependencies
      shell: bash -l {0}
      run: |
        conda config --add channels conda-forge
        conda config --set channel_priority strict
        conda install -y sleef numpy
        conda list
        if [ ! -f "$CONDA_PREFIX/Library/include/sleef.h" ]; then
          echo "sleef.h not found. Installation may have failed."
          exit 1
        fi
        ls -l "$CONDA_PREFIX/Library/include/sleef.h"
        ls -l "$CONDA_PREFIX/Library/lib/sleef"*

    - name: Set environment variables
      shell: pwsh
      run: |
        echo "CONDA_PREFIX=$env:CONDA_PREFIX" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        $numpy_path = python -c "import numpy; import os; print(os.path.abspath(numpy.get_include()).replace(os.sep, '/'))"
        echo "NUMPY_INCLUDE_DIR=$numpy_path" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Install build dependencies
      shell: bash -l {0}
      run: |
        pip install -U pip
        pip install cibuildwheel==2.20.0 ninja meson meson-python numpy delvewheel pytest

    - name: Build wheels
      env:
        CONDA_PREFIX: ${{ env.CONDA_PREFIX }}
        CIBW_BUILD: 'cp310-* cp311-* cp312-*'
        CIBW_SKIP: 'pp* cp36-* cp37-* cp38-* cp39-* cp313-*'
        CIBW_ARCHS_WINDOWS: ${{ matrix.architecture == 'x86' && 'x86' || 'AMD64' }}
        CIBW_BUILD_VERBOSITY: '1'
        SLEEF_INCLUDE_DIR: ${{ env.CONDA_PREFIX }}\Library\include
        SLEEF_LIBRARY: ${{ env.CONDA_PREFIX }}\Library\lib
        DISTUTILS_USE_SDK: '1'
        MSSdk: '1'
        NUMPY_INCLUDE_DIR: ${{ env.NUMPY_INCLUDE_DIR }}
        CIBW_ENVIRONMENT: >-
          NUMPY_INCLUDE_DIR="${{ env.NUMPY_INCLUDE_DIR }}"
          SLEEF_INCLUDE_DIR="${{ env.CONDA_PREFIX }}/Library/include"
          SLEEF_LIBRARY="${{ env.CONDA_PREFIX }}/Library/lib"
        CIBW_BEFORE_BUILD: pip install meson meson-python ninja numpy
        CIBW_REPAIR_WHEEL_COMMAND: 'delvewheel repair -w {dest_dir} {wheel}'
        CIBW_TEST_COMMAND: |
          pip install {package}[test]
          pytest {project}/tests
        CIBW_TEST_EXTRAS: 'test'
        CIBW_TEST_FAIL_FAST: 1
      shell: pwsh
      run: |
        python -m cibuildwheel --output-dir wheelhouse
        if (-not (Test-Path wheelhouse/*.whl)) { throw "Wheel was not created" }
      working-directory: ./quaddtype

    - uses: actions/upload-artifact@v4
      with:
        path: ./quaddtype/wheelhouse/*.whl
        name: wheels-windows-${{ matrix.architecture }}