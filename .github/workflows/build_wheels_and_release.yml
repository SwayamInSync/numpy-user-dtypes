name: Build quaddtype wheels for Linux and macOS

on:
  push:
    branches:
      - testing-pkg
    tags:
      - "v*"
  pull_request:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-13, macos-14]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: "3.10"
          activate-environment: build-env

      - name: Install SLEEF and other dependencies
        shell: bash -l {0}
        run: |
          conda config --add channels conda-forge
          conda config --set channel_priority strict
          conda install -y sleef
          conda list
          if [ ! -f "$CONDA_PREFIX/include/sleef.h" ]; then
            echo "sleef.h not found. Installation may have failed."
            exit 1
          fi
          ls -l "$CONDA_PREFIX/include/sleef.h"
          ls -l "$CONDA_PREFIX/lib/libsleef"*

      - name: Install build dependencies
        shell: bash -l {0}
        run: |
          pip install -U pip
          pip install cibuildwheel==2.20.0 ninja meson meson-python

      - name: Build wheels
        shell: bash -l {0}
        env:
          CIBW_BUILD: cp310-*
          CIBW_ARCHS_MACOS: ${{ matrix.os == 'macos-13' && 'x86_64' || 'arm64' }}
          CIBW_BUILD_VERBOSITY: "1"
          SLEEF_INCLUDE_DIR: ${{ env.CONDA_PREFIX }}/include
          SLEEF_LIBRARY: ${{ env.CONDA_PREFIX }}/lib
        run: |
          python -m cibuildwheel --output-dir wheelhouse
          if [ ! -f wheelhouse/*.whl ]; then echo "Wheel was not created" && exit 1; fi
        working-directory: ./quaddtype

      - uses: actions/upload-artifact@v3
        with:
          path: ./quaddtype/wheelhouse/*.whl
          name: wheels-${{ matrix.os }}

  publish_to_testpypi:
    name: Publish to TestPyPI
    needs: build_wheels
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@v1.8.5
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist/*

  create_release:
    name: Create Release
    needs: build_wheels
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        uses: softprops/action-gh-release@v1
        with:
          files: ./artifacts/**/*.whl
