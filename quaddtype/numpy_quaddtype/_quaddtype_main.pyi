from typing import Any, Literal, TypeAlias, final, overload

import numpy as np
from typing_extensions import Never, Self, override

_Backend: TypeAlias = Literal["sleef", "longdouble"]
_IntoQuad: TypeAlias = QuadPrecision | float | str
_CastsQuad: TypeAlias = _IntoQuad | np.floating[Any] | np.integer[Any] | np.bool_

@final
class QuadPrecDType(np.dtype[QuadPrecision]):  # type: ignore[misc, type-var]  # pyright: ignore[reportGeneralTypeIssues, reportInvalidTypeArguments]
    def __new__(cls, /, backend: _Backend = "sleef") -> Self: ...

    # `numpy.dtype` overrides
    names: None  # pyright: ignore[reportIncompatibleVariableOverride]
    @property
    @override
    def alignment(self) -> Literal[16]: ...
    @property
    @override
    def itemsize(self) -> Literal[16]: ...
    @property
    @override
    def name(self) -> Literal["QuadPrecDType128"]: ...
    @property
    @override
    def byteorder(self) -> Literal["|"]: ...
    @property
    @override
    def char(self) -> Literal["\x00"]: ...  # type: ignore[override]  # pyright: ignore[reportIncompatibleMethodOverride]
    @property
    @override
    def kind(self) -> Literal["\x00"]: ...  # type: ignore[override]  # pyright: ignore[reportIncompatibleMethodOverride]
    @property
    @override
    def num(self) -> Literal[-1]: ...  # type: ignore[override]  # pyright: ignore[reportIncompatibleMethodOverride]
    @property
    @override
    def shape(self) -> tuple[()]: ...
    @property
    @override
    def ndim(self) -> Literal[0]: ...
    @property
    @override
    def fields(self) -> None: ...
    @property
    @override
    def base(self) -> Self: ...
    @property
    @override
    def subdtype(self) -> None: ...
    @property
    @override
    def hasobject(self) -> Literal[False]: ...
    @property
    @override
    def isbuiltin(self) -> Literal[0]: ...
    @property
    @override
    def isnative(self) -> Literal[True]: ...
    @property
    @override
    def isalignedstruct(self) -> Literal[False]: ...
    @override
    def __getitem__(self, key: Never, /) -> Self: ...  # type: ignore[override]

@final
class QuadPrecision:  # NOTE: It doesn't inherit from `np.generic` which is type-unsafe
    def __new__(cls, /, value: _IntoQuad, backend: _Backend = "sleef") -> Self: ...

    # Rich comparison operators
    # NOTE: Unlike other numpy scalars, these return `builtins.bool`, not `np.bool`.
    @override
    def __eq__(self, other: object, /) -> bool: ...
    @override
    def __ne__(self, other: object, /) -> bool: ...
    def __lt__(self, other: _IntoQuad, /) -> bool: ...
    def __le__(self, other: _IntoQuad, /) -> bool: ...
    def __gt__(self, other: _IntoQuad, /) -> bool: ...
    def __ge__(self, other: _IntoQuad, /) -> bool: ...

    # Binary operators
    def __add__(self, other: _CastsQuad, /) -> Self: ...
    def __radd__(self, other: _CastsQuad, /) -> Self: ...
    def __sub__(self, other: _CastsQuad, /) -> Self: ...
    def __rsub__(self, other: _CastsQuad, /) -> Self: ...
    def __mul__(self, other: _CastsQuad, /) -> Self: ...
    def __rmul__(self, other: _CastsQuad, /) -> Self: ...
    def __pow__(self, other: _CastsQuad, mod: None = None, /) -> Self: ...
    def __rpow__(self, other: _CastsQuad, mod: None = None, /) -> Self: ...
    def __truediv__(self, other: _CastsQuad, /) -> Self: ...
    def __rtruediv__(self, other: _CastsQuad, /) -> Self: ...

    # Unary operators
    def __neg__(self, /) -> Self: ...
    def __pos__(self, /) -> Self: ...
    def __abs__(self, /) -> Self: ...

    # Conversion methods
    def __bool__(self, /) -> bool: ...
    def __int__(self, /) -> int: ...
    def __float__(self, /) -> float: ...

    # String representation
    @override
    def __repr__(self, /) -> str: ...
    @override
    def __str__(self, /) -> str: ...

#
def is_longdouble_128() -> bool: ...

@overload
def get_sleef_constant(constant_name: Literal["bits", "precision"], /) -> int: ...
@overload
def get_sleef_constant(
    constant_name: Literal[
        "pi",
        "e",
        "log2e",
        "log10e",
        "ln2",
        "ln10",
        "max_value",
        "epsilon",
        "smallest_normal",
        "smallest_subnormal",
        "resolution",
    ],
    /,
) -> QuadPrecision: ...

def set_num_threads(num_threads: int, /) -> None: ...
def get_num_threads() -> int: ...
def get_quadblas_version() -> str: ...
